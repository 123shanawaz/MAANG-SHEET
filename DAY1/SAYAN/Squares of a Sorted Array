class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
    
// approach 1 
// this will gives u TLE 
//Time Complexity- O(nlogn)

//            for (int i = 0; i < nums.size(); i++)
//         {
//             nums[i]= nums[i]* nums[i] ; 
             
//         }
//          sort(nums.begin(),nums.end());
//         return nums ; 



// efficientapproach 
   //time complexity- O(n)     
               vector<int> res(nums.size());
        int l = 0, r = nums.size() - 1;
        for (int k = nums.size() - 1; k >= 0; k--) {
          if (abs(nums[r]) > abs(nums[l])) {
      res[k] = nums[r] * nums[r];
      r--;
} else {
      res[k] = nums[l] * nums[l];
      l++;
}
        }
        return res;
        
    
    }
};
